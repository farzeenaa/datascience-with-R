{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Classify whether application accepted or not using Logistic regression\n",
    "\n",
    "#card Factor. Was the application for a credit card accepted?\n",
    "#reports Number of major derogatory reports.\n",
    "#age Age in years plus twelfths of a year.\n",
    "#income Yearly income (in USD 10,000).\n",
    "#share Ratio of monthly credit card expenditure to yearly income.\n",
    "#expenditure Average monthly credit card expenditure.\n",
    "#owner Factor. Does the individual own their home?\n",
    "#selfemp Factor. Is the individual self-employed?\n",
    "#dependents Number of dependents.\n",
    "#months Months living at current address.\n",
    "#majorcards Number of major credit cards held.\n",
    "#active Number of active credit accounts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>card</th>\n",
       "      <th>reports</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>share</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>owner</th>\n",
       "      <th>selfemp</th>\n",
       "      <th>dependents</th>\n",
       "      <th>months</th>\n",
       "      <th>majorcards</th>\n",
       "      <th>active</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>37.66667</td>\n",
       "      <td>4.5200</td>\n",
       "      <td>0.033270</td>\n",
       "      <td>124.983300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.25000</td>\n",
       "      <td>2.4200</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>9.854167</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.66667</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>30.50000</td>\n",
       "      <td>2.5400</td>\n",
       "      <td>0.065214</td>\n",
       "      <td>137.869200</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>32.16667</td>\n",
       "      <td>9.7867</td>\n",
       "      <td>0.067051</td>\n",
       "      <td>546.503300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1314</th>\n",
       "      <td>1315</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.58333</td>\n",
       "      <td>4.5660</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>7.333333</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>1316</td>\n",
       "      <td>no</td>\n",
       "      <td>5</td>\n",
       "      <td>23.91667</td>\n",
       "      <td>3.1920</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>1317</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>40.58333</td>\n",
       "      <td>4.6000</td>\n",
       "      <td>0.026513</td>\n",
       "      <td>101.298300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>1318</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>32.83333</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.008999</td>\n",
       "      <td>26.996670</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>1319</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>48.25000</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.111619</td>\n",
       "      <td>344.157500</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1319 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0 card  reports       age  income     share  expenditure owner  \\\n",
       "0              1  yes        0  37.66667  4.5200  0.033270   124.983300   yes   \n",
       "1              2  yes        0  33.25000  2.4200  0.005217     9.854167    no   \n",
       "2              3  yes        0  33.66667  4.5000  0.004156    15.000000   yes   \n",
       "3              4  yes        0  30.50000  2.5400  0.065214   137.869200    no   \n",
       "4              5  yes        0  32.16667  9.7867  0.067051   546.503300   yes   \n",
       "...          ...  ...      ...       ...     ...       ...          ...   ...   \n",
       "1314        1315  yes        0  33.58333  4.5660  0.002146     7.333333   yes   \n",
       "1315        1316   no        5  23.91667  3.1920  0.000376     0.000000    no   \n",
       "1316        1317  yes        0  40.58333  4.6000  0.026513   101.298300   yes   \n",
       "1317        1318  yes        0  32.83333  3.7000  0.008999    26.996670    no   \n",
       "1318        1319  yes        0  48.25000  3.7000  0.111619   344.157500   yes   \n",
       "\n",
       "     selfemp  dependents  months  majorcards  active  \n",
       "0         no           3      54           1      12  \n",
       "1         no           3      34           1      13  \n",
       "2         no           4      58           1       5  \n",
       "3         no           0      25           1       7  \n",
       "4         no           2      64           1       5  \n",
       "...      ...         ...     ...         ...     ...  \n",
       "1314      no           0      94           1      19  \n",
       "1315      no           3      12           1       5  \n",
       "1316      no           2       1           1       2  \n",
       "1317     yes           0      60           1       7  \n",
       "1318      no           2       2           1       0  \n",
       "\n",
       "[1319 rows x 13 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credata =pd.read_csv(\"C:\\\\Users\\\\Shaziya A\\\\Downloads\\\\creditcard.csv\")\n",
    "credata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping of 1st column\n",
    "credata=credata.drop('Unnamed: 0',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>card</th>\n",
       "      <th>reports</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>share</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>owner</th>\n",
       "      <th>selfemp</th>\n",
       "      <th>dependents</th>\n",
       "      <th>months</th>\n",
       "      <th>majorcards</th>\n",
       "      <th>active</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>37.66667</td>\n",
       "      <td>4.5200</td>\n",
       "      <td>0.033270</td>\n",
       "      <td>124.983300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.25000</td>\n",
       "      <td>2.4200</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>9.854167</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.66667</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>30.50000</td>\n",
       "      <td>2.5400</td>\n",
       "      <td>0.065214</td>\n",
       "      <td>137.869200</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>32.16667</td>\n",
       "      <td>9.7867</td>\n",
       "      <td>0.067051</td>\n",
       "      <td>546.503300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1314</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>33.58333</td>\n",
       "      <td>4.5660</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>7.333333</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>no</td>\n",
       "      <td>5</td>\n",
       "      <td>23.91667</td>\n",
       "      <td>3.1920</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>40.58333</td>\n",
       "      <td>4.6000</td>\n",
       "      <td>0.026513</td>\n",
       "      <td>101.298300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>32.83333</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.008999</td>\n",
       "      <td>26.996670</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>yes</td>\n",
       "      <td>0</td>\n",
       "      <td>48.25000</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.111619</td>\n",
       "      <td>344.157500</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1319 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     card  reports       age  income     share  expenditure owner selfemp  \\\n",
       "0     yes        0  37.66667  4.5200  0.033270   124.983300   yes      no   \n",
       "1     yes        0  33.25000  2.4200  0.005217     9.854167    no      no   \n",
       "2     yes        0  33.66667  4.5000  0.004156    15.000000   yes      no   \n",
       "3     yes        0  30.50000  2.5400  0.065214   137.869200    no      no   \n",
       "4     yes        0  32.16667  9.7867  0.067051   546.503300   yes      no   \n",
       "...   ...      ...       ...     ...       ...          ...   ...     ...   \n",
       "1314  yes        0  33.58333  4.5660  0.002146     7.333333   yes      no   \n",
       "1315   no        5  23.91667  3.1920  0.000376     0.000000    no      no   \n",
       "1316  yes        0  40.58333  4.6000  0.026513   101.298300   yes      no   \n",
       "1317  yes        0  32.83333  3.7000  0.008999    26.996670    no     yes   \n",
       "1318  yes        0  48.25000  3.7000  0.111619   344.157500   yes      no   \n",
       "\n",
       "      dependents  months  majorcards  active  \n",
       "0              3      54           1      12  \n",
       "1              3      34           1      13  \n",
       "2              4      58           1       5  \n",
       "3              0      25           1       7  \n",
       "4              2      64           1       5  \n",
       "...          ...     ...         ...     ...  \n",
       "1314           0      94           1      19  \n",
       "1315           3      12           1       5  \n",
       "1316           2       1           1       2  \n",
       "1317           0      60           1       7  \n",
       "1318           2       2           1       0  \n",
       "\n",
       "[1319 rows x 12 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "card           0\n",
       "reports        0\n",
       "age            0\n",
       "income         0\n",
       "share          0\n",
       "expenditure    0\n",
       "owner          0\n",
       "selfemp        0\n",
       "dependents     0\n",
       "months         0\n",
       "majorcards     0\n",
       "active         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cheking for null values as there are no null values present in the dataset.\n",
    "credata.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#changing the values of yes =1 and no =0\n",
    "credata['card'] = (credata['card']=='yes').astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>card</th>\n",
       "      <th>reports</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>share</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>owner</th>\n",
       "      <th>selfemp</th>\n",
       "      <th>dependents</th>\n",
       "      <th>months</th>\n",
       "      <th>majorcards</th>\n",
       "      <th>active</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>37.66667</td>\n",
       "      <td>4.5200</td>\n",
       "      <td>0.033270</td>\n",
       "      <td>124.983300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.25000</td>\n",
       "      <td>2.4200</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>9.854167</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.66667</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.50000</td>\n",
       "      <td>2.5400</td>\n",
       "      <td>0.065214</td>\n",
       "      <td>137.869200</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>32.16667</td>\n",
       "      <td>9.7867</td>\n",
       "      <td>0.067051</td>\n",
       "      <td>546.503300</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23.25000</td>\n",
       "      <td>2.5000</td>\n",
       "      <td>0.044438</td>\n",
       "      <td>91.996670</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27.91667</td>\n",
       "      <td>3.9600</td>\n",
       "      <td>0.012576</td>\n",
       "      <td>40.833330</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>29.16667</td>\n",
       "      <td>2.3700</td>\n",
       "      <td>0.076434</td>\n",
       "      <td>150.790000</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>37.00000</td>\n",
       "      <td>3.8000</td>\n",
       "      <td>0.245628</td>\n",
       "      <td>777.821700</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.41667</td>\n",
       "      <td>3.2000</td>\n",
       "      <td>0.019780</td>\n",
       "      <td>52.580000</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   card  reports       age  income     share  expenditure owner selfemp  \\\n",
       "0     1        0  37.66667  4.5200  0.033270   124.983300   yes      no   \n",
       "1     1        0  33.25000  2.4200  0.005217     9.854167    no      no   \n",
       "2     1        0  33.66667  4.5000  0.004156    15.000000   yes      no   \n",
       "3     1        0  30.50000  2.5400  0.065214   137.869200    no      no   \n",
       "4     1        0  32.16667  9.7867  0.067051   546.503300   yes      no   \n",
       "5     1        0  23.25000  2.5000  0.044438    91.996670    no      no   \n",
       "6     1        0  27.91667  3.9600  0.012576    40.833330    no      no   \n",
       "7     1        0  29.16667  2.3700  0.076434   150.790000   yes      no   \n",
       "8     1        0  37.00000  3.8000  0.245628   777.821700   yes      no   \n",
       "9     1        0  28.41667  3.2000  0.019780    52.580000    no      no   \n",
       "\n",
       "   dependents  months  majorcards  active  \n",
       "0           3      54           1      12  \n",
       "1           3      34           1      13  \n",
       "2           4      58           1       5  \n",
       "3           0      25           1       7  \n",
       "4           2      64           1       5  \n",
       "5           0      54           1       1  \n",
       "6           2       7           1       5  \n",
       "7           0      77           1       3  \n",
       "8           0      97           1       6  \n",
       "9           0      65           1      18  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credata.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>card</th>\n",
       "      <th>reports</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>share</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>owner</th>\n",
       "      <th>selfemp</th>\n",
       "      <th>dependents</th>\n",
       "      <th>months</th>\n",
       "      <th>majorcards</th>\n",
       "      <th>active</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>37.66667</td>\n",
       "      <td>4.5200</td>\n",
       "      <td>0.033270</td>\n",
       "      <td>124.983300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.25000</td>\n",
       "      <td>2.4200</td>\n",
       "      <td>0.005217</td>\n",
       "      <td>9.854167</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.66667</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.50000</td>\n",
       "      <td>2.5400</td>\n",
       "      <td>0.065214</td>\n",
       "      <td>137.869200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>32.16667</td>\n",
       "      <td>9.7867</td>\n",
       "      <td>0.067051</td>\n",
       "      <td>546.503300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1314</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.58333</td>\n",
       "      <td>4.5660</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>7.333333</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>23.91667</td>\n",
       "      <td>3.1920</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>40.58333</td>\n",
       "      <td>4.6000</td>\n",
       "      <td>0.026513</td>\n",
       "      <td>101.298300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>32.83333</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.008999</td>\n",
       "      <td>26.996670</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>48.25000</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>0.111619</td>\n",
       "      <td>344.157500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1319 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      card  reports       age  income     share  expenditure  owner  selfemp  \\\n",
       "0        1        0  37.66667  4.5200  0.033270   124.983300      1        0   \n",
       "1        1        0  33.25000  2.4200  0.005217     9.854167      0        0   \n",
       "2        1        0  33.66667  4.5000  0.004156    15.000000      1        0   \n",
       "3        1        0  30.50000  2.5400  0.065214   137.869200      0        0   \n",
       "4        1        0  32.16667  9.7867  0.067051   546.503300      1        0   \n",
       "...    ...      ...       ...     ...       ...          ...    ...      ...   \n",
       "1314     1        0  33.58333  4.5660  0.002146     7.333333      1        0   \n",
       "1315     0        5  23.91667  3.1920  0.000376     0.000000      0        0   \n",
       "1316     1        0  40.58333  4.6000  0.026513   101.298300      1        0   \n",
       "1317     1        0  32.83333  3.7000  0.008999    26.996670      0        1   \n",
       "1318     1        0  48.25000  3.7000  0.111619   344.157500      1        0   \n",
       "\n",
       "      dependents  months  majorcards  active  \n",
       "0              3      54           1      12  \n",
       "1              3      34           1      13  \n",
       "2              4      58           1       5  \n",
       "3              0      25           1       7  \n",
       "4              2      64           1       5  \n",
       "...          ...     ...         ...     ...  \n",
       "1314           0      94           1      19  \n",
       "1315           3      12           1       5  \n",
       "1316           2       1           1       2  \n",
       "1317           0      60           1       7  \n",
       "1318           2       2           1       0  \n",
       "\n",
       "[1319 rows x 12 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credata['owner'] = (credata['owner']=='yes').astype(int)\n",
    "credata['selfemp'] = (credata['selfemp']=='yes').astype(int)\n",
    "credata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=\"card\",y=\"reports\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"age\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"income\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"share\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"expenditure\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"owner\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"selfemp\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"dependents\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"months\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"majorcards\",data=credata)\n",
    "plt.show()\n",
    "sns.boxplot(x=\"card\",y=\"active\",data=credata)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "endog has evaluated to an array with multiple columns that has shape (1319, 2). This occurs when the variable converted to endog is non-numeric (e.g., bool or str).",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-06b1230e2e4d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Model Building\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mstatsmodels\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformula\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapi\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mlogit_model\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlogit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'card~reports+age+income+share+expenditure+owner+selfemp+dependents+months+majorcards+active'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcredata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'bfgs'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mlogit_model\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m#share value =1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py\u001b[0m in \u001b[0;36mfrom_formula\u001b[1;34m(cls, formula, data, subset, drop_cols, *args, **kwargs)\u001b[0m\n\u001b[0;32m    175\u001b[0m                              \u001b[1;34m'columns that has shape {0}. This occurs when '\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    176\u001b[0m                              \u001b[1;34m'the variable converted to endog is non-numeric'\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 177\u001b[1;33m                              ' (e.g., bool or str).'.format(endog.shape))\n\u001b[0m\u001b[0;32m    178\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mdrop_cols\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdrop_cols\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    179\u001b[0m             \u001b[0mcols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mx\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mexog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdrop_cols\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: endog has evaluated to an array with multiple columns that has shape (1319, 2). This occurs when the variable converted to endog is non-numeric (e.g., bool or str)."
     ]
    }
   ],
   "source": [
    "#Model Building\n",
    "import statsmodels.formula.api as sm\n",
    "logit_model = sm.logit('card~reports+age+income+share+expenditure+owner+selfemp+dependents+months+majorcards+active', data = credata).fit(method = 'bfgs')\n",
    "logit_model.summary()\n",
    "#share value =1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#build a model for share \n",
    "credata['share'] = np.log(credata['share'])\n",
    "credata.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "endog has evaluated to an array with multiple columns that has shape (1319, 2). This occurs when the variable converted to endog is non-numeric (e.g., bool or str).",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-99854eee067a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#creating a new model\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mlogit_model1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlogit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'card~reports+age+income+share+expenditure+owner+selfemp+dependents+months+majorcards+active'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcredata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'bfgs'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mlogit_model1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py\u001b[0m in \u001b[0;36mfrom_formula\u001b[1;34m(cls, formula, data, subset, drop_cols, *args, **kwargs)\u001b[0m\n\u001b[0;32m    175\u001b[0m                              \u001b[1;34m'columns that has shape {0}. This occurs when '\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    176\u001b[0m                              \u001b[1;34m'the variable converted to endog is non-numeric'\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 177\u001b[1;33m                              ' (e.g., bool or str).'.format(endog.shape))\n\u001b[0m\u001b[0;32m    178\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mdrop_cols\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdrop_cols\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    179\u001b[0m             \u001b[0mcols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mx\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mexog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdrop_cols\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: endog has evaluated to an array with multiple columns that has shape (1319, 2). This occurs when the variable converted to endog is non-numeric (e.g., bool or str)."
     ]
    }
   ],
   "source": [
    "#creating a new model \n",
    "logit_model1 = sm.logit('card~reports+age+income+share+expenditure+owner+selfemp+dependents+months+majorcards+active', data = credata).fit(method = 'bfgs')\n",
    "logit_model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1.000000e+00\n",
       "1       9.675343e-01\n",
       "2       9.724026e-01\n",
       "3       1.000000e+00\n",
       "4       1.000000e+00\n",
       "            ...     \n",
       "1314    9.866901e-01\n",
       "1315    4.997503e-10\n",
       "1316    1.000000e+00\n",
       "1317    9.997268e-01\n",
       "1318    1.000000e+00\n",
       "Length: 1319, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = logit_model1.predict(credata)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating a new column to store the predicted value\n",
    "credata[\"Card_pred\"] = y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>card</th>\n",
       "      <th>reports</th>\n",
       "      <th>age</th>\n",
       "      <th>income</th>\n",
       "      <th>share</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>owner</th>\n",
       "      <th>selfemp</th>\n",
       "      <th>dependents</th>\n",
       "      <th>months</th>\n",
       "      <th>majorcards</th>\n",
       "      <th>active</th>\n",
       "      <th>Card_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>37.66667</td>\n",
       "      <td>4.5200</td>\n",
       "      <td>-3.403102</td>\n",
       "      <td>124.983300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.25000</td>\n",
       "      <td>2.4200</td>\n",
       "      <td>-5.255844</td>\n",
       "      <td>9.854167</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>9.675343e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.66667</td>\n",
       "      <td>4.5000</td>\n",
       "      <td>-5.483309</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>9.724026e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.50000</td>\n",
       "      <td>2.5400</td>\n",
       "      <td>-2.730084</td>\n",
       "      <td>137.869200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>32.16667</td>\n",
       "      <td>9.7867</td>\n",
       "      <td>-2.702308</td>\n",
       "      <td>546.503300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1314</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33.58333</td>\n",
       "      <td>4.5660</td>\n",
       "      <td>-6.144010</td>\n",
       "      <td>7.333333</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>9.866901e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>23.91667</td>\n",
       "      <td>3.1920</td>\n",
       "      <td>-7.886081</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4.997503e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1316</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>40.58333</td>\n",
       "      <td>4.6000</td>\n",
       "      <td>-3.630135</td>\n",
       "      <td>101.298300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>32.83333</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>-4.710651</td>\n",
       "      <td>26.996670</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>9.997268e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1318</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>48.25000</td>\n",
       "      <td>3.7000</td>\n",
       "      <td>-2.192668</td>\n",
       "      <td>344.157500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1319 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      card  reports       age  income     share  expenditure  owner  selfemp  \\\n",
       "0        1        0  37.66667  4.5200 -3.403102   124.983300      1        0   \n",
       "1        1        0  33.25000  2.4200 -5.255844     9.854167      0        0   \n",
       "2        1        0  33.66667  4.5000 -5.483309    15.000000      1        0   \n",
       "3        1        0  30.50000  2.5400 -2.730084   137.869200      0        0   \n",
       "4        1        0  32.16667  9.7867 -2.702308   546.503300      1        0   \n",
       "...    ...      ...       ...     ...       ...          ...    ...      ...   \n",
       "1314     1        0  33.58333  4.5660 -6.144010     7.333333      1        0   \n",
       "1315     0        5  23.91667  3.1920 -7.886081     0.000000      0        0   \n",
       "1316     1        0  40.58333  4.6000 -3.630135   101.298300      1        0   \n",
       "1317     1        0  32.83333  3.7000 -4.710651    26.996670      0        1   \n",
       "1318     1        0  48.25000  3.7000 -2.192668   344.157500      1        0   \n",
       "\n",
       "      dependents  months  majorcards  active     Card_pred  \n",
       "0              3      54           1      12  1.000000e+00  \n",
       "1              3      34           1      13  9.675343e-01  \n",
       "2              4      58           1       5  9.724026e-01  \n",
       "3              0      25           1       7  1.000000e+00  \n",
       "4              2      64           1       5  1.000000e+00  \n",
       "...          ...     ...         ...     ...           ...  \n",
       "1314           0      94           1      19  9.866901e-01  \n",
       "1315           3      12           1       5  4.997503e-10  \n",
       "1316           2       1           1       2  1.000000e+00  \n",
       "1317           0      60           1       7  9.997268e-01  \n",
       "1318           2       2           1       0  1.000000e+00  \n",
       "\n",
       "[1319 rows x 13 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#filling all the cells with value 0\n",
    "credata[\"Att_val\"] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "1       1\n",
       "2       1\n",
       "3       1\n",
       "4       1\n",
       "       ..\n",
       "1314    1\n",
       "1315    0\n",
       "1316    1\n",
       "1317    1\n",
       "1318    1\n",
       "Name: Att_val, Length: 1319, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# taking threshold value as 0.5 and above the prob value will be treated \n",
    "# as correct value \n",
    "credata.loc[y_pred>=0.5,\"Att_val\"] = 1\n",
    "credata.Att_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'              precision    recall  f1-score   support\\n\\n           0       0.98      0.92      0.95       314\\n           1       0.98      0.99      0.99      1005\\n\\n    accuracy                           0.98      1319\\n   macro avg       0.98      0.96      0.97      1319\\nweighted avg       0.98      0.98      0.98      1319\\n'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "classification_report(credata.Att_val,credata.card)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Att_val</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>card</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>290</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Att_val    0    1\n",
       "card             \n",
       "0        290    6\n",
       "1         24  999"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# confusion matrix \n",
    "confusion_matrix = pd.crosstab(credata['card'],credata.Att_val)\n",
    "confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9772554965883244"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accuracy\n",
    "accuracy = (290+999)/(290+6+24+999)\n",
    "accuracy #accuraccy = 0.97725"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROC curve \n",
    "from sklearn import metrics\n",
    "# fpr => false positive rate\n",
    "# tpr => true positive rate\n",
    "fpr, tpr, threshold = metrics.roc_curve(credata.card, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'True Positive')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr,tpr);plt.xlabel(\"False Positive\");plt.ylabel(\"True Positive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9953865155478059"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc = metrics.auc(fpr, tpr) \n",
    "roc_auc #0.9953"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
